- go by x & y
- find any belt
- start a QList<> of positions of these belts until you get to a non-belt tile
- start updating item positions from this non-belt tile until you reach the original belt again
- continue looking in x & y system
- if you find another belt look if it was updated already
- - if it was updated skip it
- - if it wasn't updated, create a chain until first updated or non-belt tile and update that chain

- this has one problem:
	- if you have 2 belts feeding into 1 and the same belt
	- in this update procedure you will come to this "shared" belt always from 1 direction first
	- this will make this side of belt feeding to have a priority
	

- need to think of a system that will equaly distribute priorities



-chain has to end even if it finds already updated belt, not just a non-belt tile


__________________________________________________________________


- each belt could look in all 4 directions and count how many other belts of inserters are feeding into him
- each belt that finds more then 1 input could be marked for special update
- when the chain is done and it's updating tile after tile in the chain it will come to tile with this flag
- such a tile has to push his own items forward
- such a tile should have a int in memory that tells him which of these directions has fed him last time
- such a tile will cycle trough the directions and give everybody equal amount of updates in this priority handler
- such a tile should always give priority to direct insertion (another belt) before indirect adding on top of a pile (inserter)